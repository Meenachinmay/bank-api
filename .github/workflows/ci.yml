name: ci-test

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: bankapi
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
        id: go

      - name: Install Goose
        run: |
          go install github.com/pressly/goose/v3/cmd/goose@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break
            echo "PostgreSQL is not ready yet..."
            sleep 2
          done
          pg_isready -h 127.0.0.1 -p 5432 -U postgres

      - name: Creating env file
        run : |
          echo "DB_SOURCE=${{ secrets.DB_SOURCE }}" >> .env
          echo "DB_SOURCE_TEST=${{ secrets.DB_SOURCE_TEST }}" >> .env
          echo "DB_DRIVER=${{ secrets.DB_DRIVER }}" >> .env
          echo "SERVER_ADDRESS=8080" >> .env

      - name: Load environment variables
        run: |
          export $(grep -v '^#' .env | xargs)
          echo "DB_SOURCE=$DB_SOURCE" >> $GITHUB_ENV
          echo "DB_SOURCE_TEST=$DB_SOURCE_TEST" >> $GITHUB_ENV
          echo "DB_DRIVER=$DB_DRIVER" >> $GITHUB_ENV
          echo "SERVER_ADDRESS=$SERVER_ADDRESS" >> $GITHUB_ENV

      - name: Create Test Database
        run: make createdb

      - name: Run Migrations
        run: make dbmigrate-test

      - name: Tidy Go Modules
        run: go mod tidy

      - name: Test Store
        run: go test -tags=storetest -v ./db/sqlc

      - name: Test Handler
        run: go test -tags=handlertest -v ./api

