// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, email)
VALUES ($1, $2)
RETURNING id, user_name, email, extra_interest, created_at
`

type CreateUserParams struct {
	UserName string `json:"user_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.UserName, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.ExtraInterest,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_name, email, extra_interest, created_at FROM users
    WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.ExtraInterest,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_name, email, extra_interest, created_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.ExtraInterest,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserInterest = `-- name: UpdateUserInterest :one
UPDATE users
SET extra_interest = $2
WHERE id = $1
RETURNING id, user_name, email, extra_interest, created_at
`

type UpdateUserInterestParams struct {
	ID            int64           `json:"id"`
	ExtraInterest sql.NullFloat64 `json:"extra_interest"`
}

func (q *Queries) UpdateUserInterest(ctx context.Context, arg UpdateUserInterestParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserInterestStmt, updateUserInterest, arg.ID, arg.ExtraInterest)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.ExtraInterest,
		&i.CreatedAt,
	)
	return i, err
}
