// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addAccountBalanceStmt, err = db.PrepareContext(ctx, addAccountBalance); err != nil {
		return nil, fmt.Errorf("error preparing query AddAccountBalance: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createReferralCodeStmt, err = db.PrepareContext(ctx, createReferralCode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReferralCode: %w", err)
	}
	if q.createReferralHistoryStmt, err = db.PrepareContext(ctx, createReferralHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReferralHistory: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getAccountForUpdateStmt, err = db.PrepareContext(ctx, getAccountForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountForUpdate: %w", err)
	}
	if q.getAccountWithEmailStmt, err = db.PrepareContext(ctx, getAccountWithEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountWithEmail: %w", err)
	}
	if q.getEntryStmt, err = db.PrepareContext(ctx, getEntry); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntry: %w", err)
	}
	if q.getReferralCodeStmt, err = db.PrepareContext(ctx, getReferralCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferralCode: %w", err)
	}
	if q.getReferralCodesForReferrerAccountStmt, err = db.PrepareContext(ctx, getReferralCodesForReferrerAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferralCodesForReferrerAccount: %w", err)
	}
	if q.getReferralHistoryStmt, err = db.PrepareContext(ctx, getReferralHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferralHistory: %w", err)
	}
	if q.getReferralHistoryByDateStmt, err = db.PrepareContext(ctx, getReferralHistoryByDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferralHistoryByDate: %w", err)
	}
	if q.getReferralsByDateRangeStmt, err = db.PrepareContext(ctx, getReferralsByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferralsByDateRange: %w", err)
	}
	if q.getTransferStmt, err = db.PrepareContext(ctx, getTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransfer: %w", err)
	}
	if q.getUnusedReferralCodesStmt, err = db.PrepareContext(ctx, getUnusedReferralCodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnusedReferralCodes: %w", err)
	}
	if q.hasUnUsedCodeForReferrerAccountStmt, err = db.PrepareContext(ctx, hasUnUsedCodeForReferrerAccount); err != nil {
		return nil, fmt.Errorf("error preparing query HasUnUsedCodeForReferrerAccount: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.markReferralCodeUsedStmt, err = db.PrepareContext(ctx, markReferralCodeUsed); err != nil {
		return nil, fmt.Errorf("error preparing query MarkReferralCodeUsed: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountInterestStmt, err = db.PrepareContext(ctx, updateAccountInterest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountInterest: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addAccountBalanceStmt != nil {
		if cerr := q.addAccountBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addAccountBalanceStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createReferralCodeStmt != nil {
		if cerr := q.createReferralCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReferralCodeStmt: %w", cerr)
		}
	}
	if q.createReferralHistoryStmt != nil {
		if cerr := q.createReferralHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReferralHistoryStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getAccountForUpdateStmt != nil {
		if cerr := q.getAccountForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountForUpdateStmt: %w", cerr)
		}
	}
	if q.getAccountWithEmailStmt != nil {
		if cerr := q.getAccountWithEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountWithEmailStmt: %w", cerr)
		}
	}
	if q.getEntryStmt != nil {
		if cerr := q.getEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryStmt: %w", cerr)
		}
	}
	if q.getReferralCodeStmt != nil {
		if cerr := q.getReferralCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferralCodeStmt: %w", cerr)
		}
	}
	if q.getReferralCodesForReferrerAccountStmt != nil {
		if cerr := q.getReferralCodesForReferrerAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferralCodesForReferrerAccountStmt: %w", cerr)
		}
	}
	if q.getReferralHistoryStmt != nil {
		if cerr := q.getReferralHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferralHistoryStmt: %w", cerr)
		}
	}
	if q.getReferralHistoryByDateStmt != nil {
		if cerr := q.getReferralHistoryByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferralHistoryByDateStmt: %w", cerr)
		}
	}
	if q.getReferralsByDateRangeStmt != nil {
		if cerr := q.getReferralsByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferralsByDateRangeStmt: %w", cerr)
		}
	}
	if q.getTransferStmt != nil {
		if cerr := q.getTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransferStmt: %w", cerr)
		}
	}
	if q.getUnusedReferralCodesStmt != nil {
		if cerr := q.getUnusedReferralCodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnusedReferralCodesStmt: %w", cerr)
		}
	}
	if q.hasUnUsedCodeForReferrerAccountStmt != nil {
		if cerr := q.hasUnUsedCodeForReferrerAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hasUnUsedCodeForReferrerAccountStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.markReferralCodeUsedStmt != nil {
		if cerr := q.markReferralCodeUsedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markReferralCodeUsedStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountInterestStmt != nil {
		if cerr := q.updateAccountInterestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountInterestStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	addAccountBalanceStmt                  *sql.Stmt
	createAccountStmt                      *sql.Stmt
	createEntryStmt                        *sql.Stmt
	createReferralCodeStmt                 *sql.Stmt
	createReferralHistoryStmt              *sql.Stmt
	createTransferStmt                     *sql.Stmt
	deleteAccountStmt                      *sql.Stmt
	getAccountStmt                         *sql.Stmt
	getAccountForUpdateStmt                *sql.Stmt
	getAccountWithEmailStmt                *sql.Stmt
	getEntryStmt                           *sql.Stmt
	getReferralCodeStmt                    *sql.Stmt
	getReferralCodesForReferrerAccountStmt *sql.Stmt
	getReferralHistoryStmt                 *sql.Stmt
	getReferralHistoryByDateStmt           *sql.Stmt
	getReferralsByDateRangeStmt            *sql.Stmt
	getTransferStmt                        *sql.Stmt
	getUnusedReferralCodesStmt             *sql.Stmt
	hasUnUsedCodeForReferrerAccountStmt    *sql.Stmt
	listAccountsStmt                       *sql.Stmt
	listEntriesStmt                        *sql.Stmt
	listTransfersStmt                      *sql.Stmt
	markReferralCodeUsedStmt               *sql.Stmt
	updateAccountStmt                      *sql.Stmt
	updateAccountInterestStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		addAccountBalanceStmt:                  q.addAccountBalanceStmt,
		createAccountStmt:                      q.createAccountStmt,
		createEntryStmt:                        q.createEntryStmt,
		createReferralCodeStmt:                 q.createReferralCodeStmt,
		createReferralHistoryStmt:              q.createReferralHistoryStmt,
		createTransferStmt:                     q.createTransferStmt,
		deleteAccountStmt:                      q.deleteAccountStmt,
		getAccountStmt:                         q.getAccountStmt,
		getAccountForUpdateStmt:                q.getAccountForUpdateStmt,
		getAccountWithEmailStmt:                q.getAccountWithEmailStmt,
		getEntryStmt:                           q.getEntryStmt,
		getReferralCodeStmt:                    q.getReferralCodeStmt,
		getReferralCodesForReferrerAccountStmt: q.getReferralCodesForReferrerAccountStmt,
		getReferralHistoryStmt:                 q.getReferralHistoryStmt,
		getReferralHistoryByDateStmt:           q.getReferralHistoryByDateStmt,
		getReferralsByDateRangeStmt:            q.getReferralsByDateRangeStmt,
		getTransferStmt:                        q.getTransferStmt,
		getUnusedReferralCodesStmt:             q.getUnusedReferralCodesStmt,
		hasUnUsedCodeForReferrerAccountStmt:    q.hasUnUsedCodeForReferrerAccountStmt,
		listAccountsStmt:                       q.listAccountsStmt,
		listEntriesStmt:                        q.listEntriesStmt,
		listTransfersStmt:                      q.listTransfersStmt,
		markReferralCodeUsedStmt:               q.markReferralCodeUsedStmt,
		updateAccountStmt:                      q.updateAccountStmt,
		updateAccountInterestStmt:              q.updateAccountInterestStmt,
	}
}
