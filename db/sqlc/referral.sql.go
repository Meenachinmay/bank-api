// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: referral.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createReferralCode = `-- name: CreateReferralCode :one
INSERT INTO referral_codes (referral_code, referrer_user_id)
VALUES ($1, $2)
RETURNING id, referral_code, referrer_user_id, is_used, created_at, used_at
`

type CreateReferralCodeParams struct {
	ReferralCode   string `json:"referral_code"`
	ReferrerUserID int64  `json:"referrer_user_id"`
}

func (q *Queries) CreateReferralCode(ctx context.Context, arg CreateReferralCodeParams) (ReferralCode, error) {
	row := q.queryRow(ctx, q.createReferralCodeStmt, createReferralCode, arg.ReferralCode, arg.ReferrerUserID)
	var i ReferralCode
	err := row.Scan(
		&i.ID,
		&i.ReferralCode,
		&i.ReferrerUserID,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const createReferralHistory = `-- name: CreateReferralHistory :one
INSERT INTO referral_history (referrer_user_id, referred_user_id, referral_code_id, referral_date)
VALUES ($1, $2, $3, $4)
RETURNING id, referrer_user_id, referred_user_id, referral_code_id, referral_date, created_at
`

type CreateReferralHistoryParams struct {
	ReferrerUserID int64     `json:"referrer_user_id"`
	ReferredUserID int64     `json:"referred_user_id"`
	ReferralCodeID int64     `json:"referral_code_id"`
	ReferralDate   time.Time `json:"referral_date"`
}

func (q *Queries) CreateReferralHistory(ctx context.Context, arg CreateReferralHistoryParams) (ReferralHistory, error) {
	row := q.queryRow(ctx, q.createReferralHistoryStmt, createReferralHistory,
		arg.ReferrerUserID,
		arg.ReferredUserID,
		arg.ReferralCodeID,
		arg.ReferralDate,
	)
	var i ReferralHistory
	err := row.Scan(
		&i.ID,
		&i.ReferrerUserID,
		&i.ReferredUserID,
		&i.ReferralCodeID,
		&i.ReferralDate,
		&i.CreatedAt,
	)
	return i, err
}

const getReferralCode = `-- name: GetReferralCode :one
SELECT id, referral_code, referrer_user_id, is_used, created_at, used_at FROM referral_codes
WHERE referral_code = $1
LIMIT 1
`

func (q *Queries) GetReferralCode(ctx context.Context, referralCode string) (ReferralCode, error) {
	row := q.queryRow(ctx, q.getReferralCodeStmt, getReferralCode, referralCode)
	var i ReferralCode
	err := row.Scan(
		&i.ID,
		&i.ReferralCode,
		&i.ReferrerUserID,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getReferralHistory = `-- name: GetReferralHistory :many
SELECT id, referrer_user_id, referred_user_id, referral_code_id, referral_date, created_at FROM referral_history
WHERE referrer_user_id = $1
ORDER BY referral_date
`

func (q *Queries) GetReferralHistory(ctx context.Context, referrerUserID int64) ([]ReferralHistory, error) {
	rows, err := q.query(ctx, q.getReferralHistoryStmt, getReferralHistory, referrerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReferralHistory{}
	for rows.Next() {
		var i ReferralHistory
		if err := rows.Scan(
			&i.ID,
			&i.ReferrerUserID,
			&i.ReferredUserID,
			&i.ReferralCodeID,
			&i.ReferralDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReferralHistoryByDate = `-- name: GetReferralHistoryByDate :many
SELECT id, referrer_user_id, referred_user_id, referral_code_id, referral_date, created_at FROM referral_history
WHERE referrer_user_id = $1
  AND referral_date >= $2 AND referral_date <= $3
ORDER BY referral_date
`

type GetReferralHistoryByDateParams struct {
	ReferrerUserID int64     `json:"referrer_user_id"`
	ReferralDate   time.Time `json:"referral_date"`
	ReferralDate_2 time.Time `json:"referral_date_2"`
}

func (q *Queries) GetReferralHistoryByDate(ctx context.Context, arg GetReferralHistoryByDateParams) ([]ReferralHistory, error) {
	rows, err := q.query(ctx, q.getReferralHistoryByDateStmt, getReferralHistoryByDate, arg.ReferrerUserID, arg.ReferralDate, arg.ReferralDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReferralHistory{}
	for rows.Next() {
		var i ReferralHistory
		if err := rows.Scan(
			&i.ID,
			&i.ReferrerUserID,
			&i.ReferredUserID,
			&i.ReferralCodeID,
			&i.ReferralDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markReferralCodeUsed = `-- name: MarkReferralCodeUsed :one
UPDATE referral_codes
SET is_used = true, used_at = $2
WHERE referral_code = $1
RETURNING id, referral_code, referrer_user_id, is_used, created_at, used_at
`

type MarkReferralCodeUsedParams struct {
	ReferralCode string       `json:"referral_code"`
	UsedAt       sql.NullTime `json:"used_at"`
}

func (q *Queries) MarkReferralCodeUsed(ctx context.Context, arg MarkReferralCodeUsedParams) (ReferralCode, error) {
	row := q.queryRow(ctx, q.markReferralCodeUsedStmt, markReferralCodeUsed, arg.ReferralCode, arg.UsedAt)
	var i ReferralCode
	err := row.Scan(
		&i.ID,
		&i.ReferralCode,
		&i.ReferrerUserID,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}
